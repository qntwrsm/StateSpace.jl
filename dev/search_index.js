var documenterSearchIndex = {"docs":
[{"location":"models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"A variety of model specifications in state space formulation.","category":"page"},{"location":"models/#Dynamic-Factor-Models","page":"Models","title":"Dynamic Factor Models","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"DynamicFactorModel\nDynamicNelsonSiegelModel","category":"page"},{"location":"models/#StateSpace.DynamicFactorModel","page":"Models","title":"StateSpace.DynamicFactorModel","text":"DynamicFactorModel <: StateSpaceModel\n\nConstructor for a dynamic factor model instance of the state space model type with hyperparameters Λ and ϕ, error specification, and mean specification.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.DynamicNelsonSiegelModel","page":"Models","title":"StateSpace.DynamicNelsonSiegelModel","text":"DynamicNelsonSiegelModel <: StateSpaceModel\n\nConstructor for a dynamic Nelson Siegel model instance of the state space model type with hyperparameters λ, ϕ, and error specifications\n\n\n\n\n\n","category":"type"},{"location":"models/#Mean-Specifications","page":"Models","title":"Mean Specifications","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"NoConstant\nConstant\nExogeneous","category":"page"},{"location":"models/#StateSpace.NoConstant","page":"Models","title":"StateSpace.NoConstant","text":"NoConstant <: AbstractMeanModel\n\nConstructor for a no constant mean specification instance of the mean model type.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.Constant","page":"Models","title":"StateSpace.Constant","text":"Constant <: AbstractMeanModel\n\nConstructor for a constant mean specification instance of the mean model type, with hyperparameter μ.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.Exogeneous","page":"Models","title":"StateSpace.Exogeneous","text":"Exogeneous <: AbstractMeanModel\n\nConstructor for a exogeneous regressors mean model specification instance of the mean model type, with hyperparameter β and exogenous regressors X.\n\n\n\n\n\n","category":"type"},{"location":"models/#Error-Specifications","page":"Models","title":"Error Specifications","text":"","category":"section"},{"location":"models/","page":"Models","title":"Models","text":"Independent\nIdiosyncratic\nSpatialErrorModel\nSpatialMovingAverageModel","category":"page"},{"location":"models/#StateSpace.Independent","page":"Models","title":"StateSpace.Independent","text":"Independent <: AbstractErrorModel\n\nConstructor for a independent error specification instance of the error model type, with hyperparameters σ and ω.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.Idiosyncratic","page":"Models","title":"StateSpace.Idiosyncratic","text":"Idiosyncratic <: AbstractErrorModel\n\nConstructor for a idiosyncratic error specification instance of the error model type, with hyperparameters Σ and Ω.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.SpatialErrorModel","page":"Models","title":"StateSpace.SpatialErrorModel","text":"SpatialErrorModel <: AbstractErrorModel\n\nConstructor for a spatial error model specification instance of the error model type, with hyperparameter ρ, idiosyncratic error specification error, spatial weight matrix W, and group structure groups.\n\n\n\n\n\n","category":"type"},{"location":"models/#StateSpace.SpatialMovingAverageModel","page":"Models","title":"StateSpace.SpatialMovingAverageModel","text":"SpatialMovingAverageModel <: AbstractErrorModel\n\nConstructor for a spatial moving average model specification instance of the error model type, with hyperparameter ρ, idiosyncratic error specification error, spatial weight matrix W, and group structure groups.\n\n\n\n\n\n","category":"type"},{"location":"filter/#Kalman-Filter","page":"Kalman Filter","title":"Kalman Filter","text":"","category":"section"},{"location":"filter/","page":"Kalman Filter","title":"Kalman Filter","text":"Kalman filtering routines for a linear Gaussian state space model.","category":"page"},{"location":"filter/","page":"Kalman Filter","title":"Kalman Filter","text":"kalman_filter!","category":"page"},{"location":"filter/#StateSpace.kalman_filter!","page":"Kalman Filter","title":"StateSpace.kalman_filter!","text":"kalman_filter!(filter, sys)\n\nCompute predicted states a and forecast errors v with corresponding variances P and F and Kalman gain K for a linear Gaussian State Space model with system matrices sys using the Kalman filter, storing the results in filter.\n\nArguments\n\nsys::StateSpaceSystem\t: state space system matrices\n\nReturns\n\nfilter::MultivariateFilter: Kalman filter output\n\n\n\n\n\nkalman_filter!(filter, sys)\n\nCompute predicted states a and forecast errors v with corresponding variance P and precision F¹ and Kalman gain K for a linear Gaussian State Space model with system matrices sys using the Kalman filter based on Woodbury's Identity, storing the results in filter.\n\nWoodbury's Identity allows direct computation of the inverse variance (precision) F¹.\n\nArguments\n\nsys::StateSpaceSystem\t: state space system matrices\n\nReturns\n\nfilter::WoodburyFilter: Kalman filter output\n\n\n\n\n\nkalman_filter!(filter, sys)\n\nCompute predicted states a and forecast errors v with corresponding variances P and F and Kalman gain K for a linear Gaussian State Space model with system matrices sys using the equation-by-equation or univariate version of the Kalman filter, storing the results in filter.\n\nArguments\n\nsys::StateSpaceSystem\t: state space system matrices\n\nReturns\n\nfilter::UnivariateFilter\t: Kalman filter output\n\n\n\n\n\n","category":"function"},{"location":"estimation/#Estimation","page":"Estimation","title":"Estimation","text":"","category":"section"},{"location":"estimation/","page":"Estimation","title":"Estimation","text":"State space model hyper parameters optimization routines.","category":"page"},{"location":"estimation/#Maximum-Likelihood","page":"Estimation","title":"Maximum Likelihood","text":"","category":"section"},{"location":"estimation/","page":"Estimation","title":"Estimation","text":"maximum_likelihood!","category":"page"},{"location":"estimation/#StateSpace.maximum_likelihood!","page":"Estimation","title":"StateSpace.maximum_likelihood!","text":"maximum_likelihood!(model; init=NamedTuple(), method=:collapsed, pen=NoPen(), ϵ_abs=1e-7, ϵ_rel=1e-4, max_iter=1000)\n\nMaximum Likelihood (ML) algorithm to estimate the hyper parameters of a linear Gaussian State Space model as defined by model, results are stored in model. Penalized ML estimation is allowed through pen. If pen` = NoPen()`` the optimization routine is L-BFGS, whenpen≂̸ NoPen()` optimization is doen through ADMM.\n\nArguments\n\nmodel::StateSpaceModel: state space model\ninit::NamedTuple      : initial model parameters\nmethod::Symbol        : filtering method\npen::Penalization     : penalization type\nϵ_abs::Real           : absolute tolerance\nϵ_rel::Real           : relative tolerance\nmax_iter::Integer     : max number of iterations\n\nReturns\n\nll::Real          : log-likelihood value      \n\n\n\n\n\n","category":"function"},{"location":"estimation/#Expectation-Maximization","page":"Estimation","title":"Expectation-Maximization","text":"","category":"section"},{"location":"estimation/","page":"Estimation","title":"Estimation","text":"em!\necm!","category":"page"},{"location":"estimation/#StateSpace.em!","page":"Estimation","title":"StateSpace.em!","text":"em!(model, pen; init=NamedTuple(), ϵ=1e-4, max_iter=1000)\n\nExpectation-Maximization (EM) algorithm to estimate the hyper parameters of a linear Gaussian State Space model as defined by model, storing the results in model.\n\nArguments\n\nmodel::StateSpaceModel: state space model\npen::NamedTuple       : penalization parameters\nmethod::Symbol        : filtering method\ninit::NamedTuple      : initial model parameters\nϵ::Real               : tolerance\nmax_iter::Integer     : max number of iterations\n\nReturns\n\nll::Real  : log-likelihood value      \n\n\n\n\n\n","category":"function"},{"location":"estimation/#StateSpace.ecm!","page":"Estimation","title":"StateSpace.ecm!","text":"ecm!(model, pen; init=NamedTuple(), ϵ=1e-4, max_iter=1000)\n\nExpectation-Conditional Maximization (ECM) algorithm to estimate the hyper parameters of a linear Gaussian State Space model as defined by model, results are stored in model.\n\nArguments\n\nmodel::StateSpaceModel: state space model\npen::NamedTuple       : penalization parameters\nmethod::Symbol        : filtering method\ninit::NamedTuple      : initial model parameters\nϵ::Real               : tolerance\nmax_iter::Integer     : max number of iterations\n\nReturns\n\nll::Real  : log-likelihood value      \n\n\n\n\n\n","category":"function"},{"location":"smoother/#Kalman-Smoother","page":"Kalman Smoother","title":"Kalman Smoother","text":"","category":"section"},{"location":"smoother/","page":"Kalman Smoother","title":"Kalman Smoother","text":"kalman_smoother!\nkalman_smoother_cov!","category":"page"},{"location":"smoother/#StateSpace.kalman_smoother!","page":"Kalman Smoother","title":"StateSpace.kalman_smoother!","text":"kalman_smoother!(smoother, filter, sys)\n\nCompute smoothed states α and corresponding variances V for a linear Gaussian State Space model with system matrices sys and Kalman filter output filter, storing the result in smoother.\n\nArguments\n\nfilter::KalmanFilter\t: Kalman filter output\nsys::StateSpaceSystem\t: state space system matrices\n\nReturns\n\nsmoother::Smoother\t: Kalman smoother output\n\n\n\n\n\n","category":"function"},{"location":"smoother/#StateSpace.kalman_smoother_cov!","page":"Kalman Smoother","title":"StateSpace.kalman_smoother_cov!","text":"kalman_smoother_cov!(smoother, filter, sys; h=1)\n\nCompute smoothed states α and corresponding variances V and autocovariances V(h) up until lag h for a linear Gaussian State Space model with system matrices sys and Kalman filter output filter, storing the results in smoother.\n\nArguments\n\nfilter::KalmanFilter\t: Kalman filter output\nsys::StateSpaceSystem\t: state space system matrices\nh::Integer\t\t\t: lag length\n\nReturns\n\nsmoother::Smoother\t: Kalman smoother output\n\n\n\n\n\n","category":"function"},{"location":"#StateSpace.jl","page":"StateSpace.jl","title":"StateSpace.jl","text":"","category":"section"},{"location":"","page":"StateSpace.jl","title":"StateSpace.jl","text":"This is a package for state filtering, smoothing, and parameter estimation in state space models.","category":"page"},{"location":"","page":"StateSpace.jl","title":"StateSpace.jl","text":"Provides methods for a state space model such as filtering (Kalman filter), smoothing (Kalman smoother), forecasting, likelihood evaluation, and estimation of hyperparameters (Maximum Likelihood, Expectation-Maximization (EM), and Expectation-Conditional Maximization (ECM), w/ and w/o penalization).","category":"page"},{"location":"","page":"StateSpace.jl","title":"StateSpace.jl","text":"Currently only supports filtering, smoothing, and estimation for linear Gaussian state space models.","category":"page"},{"location":"#Contents","page":"StateSpace.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"StateSpace.jl","title":"StateSpace.jl","text":"Pages = [\"models.md\", \"filter.md\", \"smoother.md\", \"estimation.md\"]\nDepth = 1","category":"page"},{"location":"#Index","page":"StateSpace.jl","title":"Index","text":"","category":"section"},{"location":"","page":"StateSpace.jl","title":"StateSpace.jl","text":"","category":"page"}]
}
